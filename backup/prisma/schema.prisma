generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student?
  staff   Staff?

  @@map("users")
}

model Student {
  id             String   @id @default(cuid())
  userId         String   @unique
  studentCode    String   @unique
  gradeId        String
  sectionId      String
  enrollmentDate DateTime
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  grade   Grade   @relation(fields: [gradeId], references: [id])
  section Section @relation(fields: [sectionId], references: [id])

  @@map("students")
}

model Grade {
  id          String   @id @default(cuid())
  name        String
  level       Int
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sections Section[]
  students Student[]

  @@map("grades")
}

model Section {
  id              String   @id @default(cuid())
  name            String
  gradeId         String
  capacity        Int
  currentStudents Int      @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  grade    Grade     @relation(fields: [gradeId], references: [id])
  students Student[]

  @@map("sections")
}

model Course {
  id          String     @id @default(cuid())
  name        String
  code        String     @unique
  type        CourseType
  description String?
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  subjectAreas SubjectArea[]

  @@map("courses")
}

model SubjectArea {
  id          String   @id @default(cuid())
  name        String
  courseId    String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course    Course     @relation(fields: [courseId], references: [id])
  questions Question[]

  @@map("subject_areas")
}

model Question {
  id            String             @id @default(cuid())
  title         String
  content       String
  type          QuestionType
  difficulty    QuestionDifficulty
  subjectAreaId String
  correctAnswer String
  explanation   String?
  points        Int                @default(1)
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  subjectArea SubjectArea      @relation(fields: [subjectAreaId], references: [id])
  options     QuestionOption[]

  @@map("questions")
}

model QuestionOption {
  id         String  @id @default(cuid())
  questionId String
  text       String
  isCorrect  Boolean @default(false)
  order      Int

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@map("question_options")
}

model Staff {
  id           String   @id @default(cuid())
  userId       String   @unique
  employeeCode String   @unique
  department   String
  position     String
  hireDate     DateTime
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("staff")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  COORDINATOR
}

enum CourseType {
  MATHEMATICS
  COMMUNICATION
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  OPEN_ENDED
  FILL_BLANK
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}
